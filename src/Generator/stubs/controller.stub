<?php namespace {{controller.namespace}};

use Phpsa\LaravelApiController\Http\Api\Controller;
use Illuminate\Http\Request;
use {{model.fullName}};

class {{controller.name}} extends Controller
{

    /**
     * Default Fields to response with.
     *
     * @var array
     */
    protected $defaultFields = ['*'];

    /**
     * Set the default sorting for queries.
     *
     * @var string
     */
    protected $defaultSort = null;

    /**
     * Number of items displayed at once if not specified.
     * There is no limit if it is 0 or false.
     *
     * @var int
     */
    protected $defaultLimit = 25;

    /**
     * Maximum limit that can be set via $_GET['limit'].
     *
     * @var int
     */
    protected $maximumLimit = 100;

    /**
     * WhiteList of includable methods (HasOne / HasMany)
     */
    protected $includesWhitelist = [];

    /**
     * Blacklist of blockable methods (HasOne / HasMany)
     */
    protected $includesBlacklist = [];


    /**
     * Eloquent model.
     *
     * @return \Illuminate\Database\Eloquent\Model
     */
    protected function model()
    {
        return {{model.name}}::class;
    }

     /**
     * Get the validation rules for create.
     *
     * @return array
     */
    protected function rulesForCreate(): array
    {
        return [];
    }

    /**
     * Get the validation rules for update.
     *
     * @param int $id
     *
     * @return array
     */
    protected function rulesForUpdate(/* @scrutinizer ignore-unused */$id): array
    {
        return [];
    }


    /**
     * Display a listing of the resource.
     * GET /api/{resource}.
     *
     * @param Request $request
     *
     * @return Response
     */
    public function index(Request $request)
    {
        return $this->handleIndexAction($request);
    }

   /**
    * Store a newly created resource in storage.
    * POST /api/{resource}.
	  *
	  * @param Request $request
    *
    * @return Response
    */
    public function store(Request $request)
    {
        return $this->handleStoreAction($request);
    }

    /**
     * Display the specified resource.
     * GET /api/{resource}/{id}.
     *
     * @param int $id
	   * @param Request $request
     *
     * @return Response
     */
    public function show($id, Request $request)
    {
		    return $this->handleShowAction($id, $request);
    }

    /**
     * Update the specified resource in storage.
     * PUT /api/{resource}/{id}.
     *
     * @param int $id
	   * @param Request $request
     *
     * @return Response
     */
    public function update($id, Request $request)
    {
        return $this->handleUpdateAction($id, $request);
    }

    /**
     * Remove the specified resource from storage.
     * DELETE /api/{resource}/{id}.
     *
     * @param int $id
	   * @param Request $request
     *
     * @return Response
     */
    public function destroy($id, Request $request)
    {
        return $this->handleDestroyAction($id, $request);
    }

}
